package com.example.vehiclerenting;

import com.example.vehiclerenting.Controllers.MainController;
import com.example.vehiclerenting.Models.Car;
import com.example.vehiclerenting.Models.Motorcycle;
import com.example.vehiclerenting.Models.Rental;
import com.example.vehiclerenting.Models.User;
import com.example.vehiclerenting.Repositories.CarRepository;
import com.example.vehiclerenting.Repositories.MotorcycleRepository;
import com.example.vehiclerenting.Repositories.RentalRepository;
import com.example.vehiclerenting.Repositories.UserRepository;
import com.example.vehiclerenting.Service.CarService;
import com.example.vehiclerenting.Service.MotorcycleService;
import com.example.vehiclerenting.Service.RentalService;
import com.example.vehiclerenting.Service.UserService;
import jakarta.persistence.EntityManager;
import jakarta.persistence.Query;
import jakarta.servlet.http.HttpSession;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.web.servlet.mvc.support.RedirectAttributesModelMap;

import java.time.LocalDate;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;
import java.util.stream.StreamSupport;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;


@SpringBootTest
class VehicleRentingApplicationTests {

    @Mock
    private UserRepository userRepositoryMock;

    @Mock
    private CarRepository carRepository;
    @Mock
    private MotorcycleRepository motorcycleRepository;

    @InjectMocks
    private CarService carService;
    @InjectMocks
    private MotorcycleService motorcycleService;
    @Mock
    private UserService userServiceMock;

    @Mock
    private EntityManager entityManager;
    @Mock
    private HttpSession httpSessionMock;

    @Mock
    private RedirectAttributesModelMap redirectAttrs;

    @Test
    void contextLoads() {
    }

    @Test
    public void testUserRegistration_Successful() {
        // Mocking the UserRepository
        UserRepository userRepository = mock(UserRepository.class);

        // Creating an instance of UserService with the mocked repository
        UserService userService = new UserService(userRepository, null, null);

        // Test data for a new user
        String name = "JohnDoe";
        String password = "password123";
        Integer balance = 1000;


        when(userRepository.save(Mockito.any(User.class))).thenAnswer(invocation -> {
            User newUser = invocation.getArgument(0);
            newUser.setId(1L); // Simulating an ID generated by the repository
            return newUser;
        });

        // Registering a user
        User registeredUser = userService.registerUser(name, password, balance);

        // Verify that the registeredUser object is not null
        assertNotNull(registeredUser);

        // Verify that the user details match the input data
        assertEquals(name, registeredUser.getName());
        assertEquals(password, registeredUser.getPassword());
        assertEquals(balance, registeredUser.getBalance());
    }

    @Test
    public void testUserRegistration_NullInputs() {
        // Mocking the UserRepository
        UserRepository userRepository = mock(UserRepository.class);

        // Creating an instance of UserService with the mocked repository
        UserService userService = new UserService(userRepository, null, null);

        // Attempting to register with null inputs
        User registeredUser = userService.registerUser(null, null, null);

        // Verify that registering with null inputs returns null
        assertNull(registeredUser);
    }

    @Test
    public void testUserAuthentication_Successful() {
        // Mocking the UserRepository
        UserRepository userRepository = mock(UserRepository.class);

        // Creating an instance of UserService with the mocked repository
        UserService userService = new UserService(userRepository, null, null);

        // Test data for an existing user
        String existingUsername = "JohnDoe";
        String existingPassword = "password123";
        int existingBalance = 1000;

        // Creating a user object
        User existingUser = new User();
        existingUser.setName(existingUsername);
        existingUser.setPassword(existingPassword);
        existingUser.setBalance(existingBalance);

        // Mocking the behavior of UserRepository's findUsersByNameAndPassword method for successful authentication
        when(userRepository.findUsersByNameAndPassword(existingUsername, existingPassword))
                .thenReturn(Optional.of(existingUser));

        // Attempting authentication with valid credentials
        User authenticatedUser = userService.authenticate(existingUsername, existingPassword);

        // Verify that authentication returns the correct user
        assertNotNull(authenticatedUser);
        assertEquals(existingUsername, authenticatedUser.getName());
        assertEquals(existingPassword, authenticatedUser.getPassword());
        assertEquals(existingBalance, authenticatedUser.getBalance());
    }

    @Test
    public void testUserAuthentication_Failure_InvalidCredentials() {
        // Mocking the UserRepository
        UserRepository userRepository = mock(UserRepository.class);

        // Creating an instance of UserService with the mocked repository
        UserService userService = new UserService(userRepository, null, null);

        // Test data for an existing user
        String existingUsername = "JohnDoe";
        String existingPassword = "password123";

        // Mocking the behavior of UserRepository's findUsersByNameAndPassword method for invalid credentials
        when(userRepository.findUsersByNameAndPassword(existingUsername, existingPassword))
                .thenReturn(Optional.empty());

        // Attempting authentication with invalid credentials
        User authenticatedUser = userService.authenticate(existingUsername, existingPassword);

        // Verify that authentication fails for invalid credentials
        assertNull(authenticatedUser);
    }

    @Test
    public void testCheckUserBalance_ReturnsCorrectBalance() {
        // Mocking the UserRepository
        UserRepository userRepository = mock(UserRepository.class);

        // Creating an instance of UserService with the mocked repository
        UserService userService = new UserService(userRepository, null, null);

        // Test data for a user
        Long userId = 1L;
        int userBalance = 1000;

        // Creating a user object
        User user = new User();
        user.setId(userId);
        user.setBalance(userBalance);

        // Mocking the behavior of UserRepository's findById method
        when(userRepository.findById(userId)).thenReturn(Optional.of(user));

        // Checking the user balance
        int retrievedBalance = userService.getUserBalance(userId);

        // Verify that the retrieved balance matches the user's balance
        assertEquals(userBalance, retrievedBalance);
    }

    @Test
    public void testUpdateUserBalance_Successful() {
        // Mocking the UserRepository
        UserRepository userRepository = mock(UserRepository.class);

        // Creating an instance of UserService with the mocked repository
        UserService userService = new UserService(userRepository, null, null);

        // Test data for a user
        Long userId = 1L;
        int initialBalance = 1000;
        int amountToAdd = 500;

        // Creating a user object
        User user = new User();
        user.setId(userId);
        user.setBalance(initialBalance);

        // Mocking the behavior of UserRepository's findById method
        when(userRepository.findById(userId)).thenReturn(Optional.of(user));

        // Adding balance
        userService.addBalance(userId, amountToAdd);

        // Verify that the balance has updated correctly
        assertEquals(initialBalance + amountToAdd, user.getBalance());
    }

    @Test
    public void testAddBalance_IncreasesUserBalance() {
        // Mocking the UserRepository
        UserRepository userRepository = mock(UserRepository.class);

        // Creating an instance of UserService with the mocked repository
        UserService userService = new UserService(userRepository, null, null);

        // Test data for a user
        Long userId = 1L;
        int initialBalance = 1000;
        int amountToAdd = 500;

        // Creating a user object
        User user = new User();
        user.setId(userId);
        user.setBalance(initialBalance);

        // Mocking the behavior of UserRepository's findById method
        when(userRepository.findById(userId)).thenReturn(Optional.of(user));

        // Adding balance
        userService.addBalance(userId, amountToAdd);

        // Verify that the balance has increased
        assertEquals(initialBalance + amountToAdd, user.getBalance());
    }

    @Test
    public void testAddBalance_NegativeAmountThrowsException() {
        // Mocking the UserRepository
        UserRepository userRepository = mock(UserRepository.class);

        // Creating an instance of UserService with the mocked repository
        UserService userService = new UserService(userRepository, null, null);

        // Test data for a user
        Long userId = 1L;
        int initialBalance = 1000;
        int negativeAmount = -500;

        // Creating a user object
        User user = new User();
        user.setId(userId);
        user.setBalance(initialBalance);

        // Mocking the behavior of UserRepository's findById method
        when(userRepository.findById(userId)).thenReturn(Optional.of(user));

        // Attempting to add a negative amount
        assertThrows(IllegalArgumentException.class, () -> userService.addBalance(userId, negativeAmount));
    }

    @Test
    public void testDeleteUserByAttributes_SuccessfulDeletion() {
        // Mocking the UserRepository
        UserRepository userRepository = mock(UserRepository.class);
        EntityManager entityManager = mock(EntityManager.class);
        Query query = mock(Query.class);

        // Creating an instance of UserService with the mocked repository
        UserService userService = new UserService(userRepository, null, entityManager);

        // Test data for a user
        String usernameToDelete = "JohnDoe";
        String passwordToDelete = "password123";
        int balanceToDelete = 1000;

        // Mocking the behavior of EntityManager's createQuery method
        when(entityManager.createQuery(Mockito.anyString())).thenReturn(query);

        // Mocking the behavior of UserRepository's deleteUserByAttributes method
        when(query.executeUpdate()).thenReturn(1);

        // Attempting to delete the user by attributes
        boolean deletionStatus = userService.deleteUserByAttributes(usernameToDelete, passwordToDelete, balanceToDelete);

        // Verify that the deletion was successful
        assertTrue(deletionStatus);
    }

    @Test
    public void testGetRentalHistory_ReturnsCorrectHistory() {
        // Mocking the RentalRepository
        RentalRepository rentalRepository = mock(RentalRepository.class);

        // Creating an instance of UserService with the mocked repository
        UserService userService = new UserService(null, rentalRepository, null);

        // Test data for a user
        Long userId = 1L;

        // Creating mock rental history for the user
        Rental rental1 = new Rental();
        rental1.setId(1L);

        // Add more rentals as needed for the test case
        Rental rental2 = new Rental();
        rental2.setId(2L);


        List<Rental> userRentalHistory = Arrays.asList(rental1, rental2);

        // Mocking the behavior of RentalRepository's findByUser_Id method
        when(rentalRepository.findByUser_Id(userId)).thenReturn(userRentalHistory);

        // Retrieving the rental history for the user
        List<Rental> retrievedHistory = userService.getRentalHistory(userId);

        // Verify that the retrieved rental history matches the user's history
        assertEquals(userRentalHistory.size(), retrievedHistory.size());
        assertTrue(retrievedHistory.containsAll(userRentalHistory));
    }

    @Test
    public void testIsUsernameAvailable_UserExists() {
        UserRepository userRepository = mock(UserRepository.class);
        UserService userService = new UserService(userRepository, null, null);

        String existingUsername = "JohnDoe";
        when(userRepository.findUsersByName(existingUsername)).thenReturn(Optional.of(new User()));

        assertFalse(userService.isUsernameAvailable(existingUsername));
    }

    @Test
    public void testIsUsernameAvailable_UserNotExists() {
        UserRepository userRepository = mock(UserRepository.class);
        UserService userService = new UserService(userRepository, null, null);

        String newUsername = "NewUser";
        when(userRepository.findUsersByName(newUsername)).thenReturn(Optional.empty());

        assertTrue(userService.isUsernameAvailable(newUsername));
    }

    @Test
    public void testRegisterUser_SuccessfulRegistration() {
        UserRepository userRepository = mock(UserRepository.class);
        UserService userService = new UserService(userRepository, null, null);

        String name = "JohnDoe";
        String password = "password123";
        Integer balance = 1000;

        User user = new User();
        user.setName(name);
        user.setPassword(password);
        user.setBalance(balance);

        when(userRepository.save(user)).thenReturn(user);

        User registeredUser = userService.registerUser(name, password, balance);
        assertNotNull(registeredUser);
        assertEquals(name, registeredUser.getName());
        assertEquals(password, registeredUser.getPassword());
        assertEquals(balance, registeredUser.getBalance());
    }

    @Test
    public void testAuthenticate_UserExists() {
        UserRepository userRepository = mock(UserRepository.class);
        UserService userService = new UserService(userRepository, null, null);

        String existingUsername = "JohnDoe";
        String existingPassword = "password123";
        int existingBalance = 1000;

        User existingUser = new User();
        existingUser.setName(existingUsername);
        existingUser.setPassword(existingPassword);
        existingUser.setBalance(existingBalance);

        when(userRepository.findUsersByNameAndPassword(existingUsername, existingPassword)).thenReturn(Optional.of(existingUser));

        User authenticatedUser = userService.authenticate(existingUsername, existingPassword);

        assertNotNull(authenticatedUser);
        assertEquals(existingUsername, authenticatedUser.getName());
        assertEquals(existingPassword, authenticatedUser.getPassword());
        assertEquals(existingBalance, authenticatedUser.getBalance());
    }

    @Test
    public void testAuthenticate_UserDoesNotExist() {
        UserRepository userRepository = mock(UserRepository.class);
        UserService userService = new UserService(userRepository, null, null);

        String nonExistingUsername = "NonExistingUser";
        String password = "password123";

        when(userRepository.findUsersByNameAndPassword(nonExistingUsername, password)).thenReturn(Optional.empty());

        User authenticatedUser = userService.authenticate(nonExistingUsername, password);

        assertNull(authenticatedUser);
    }

    @Test
    public void testDeleteUserByAttributes_UnsuccessfulDeletion() {
        UserRepository userRepository = mock(UserRepository.class);
        EntityManager entityManager = mock(EntityManager.class);
        UserService userService = new UserService(userRepository, null, entityManager);

        String username = "JohnDoe";
        String password = "password123";
        int balance = 1000;

        Query mockedQuery = mock(Query.class);
        when(entityManager.createQuery(Mockito.anyString())).thenReturn(mockedQuery);
        when(mockedQuery.executeUpdate()).thenReturn(0);

        assertFalse(userService.deleteUserByAttributes(username, password, balance));
    }

    @Test
    public void testRentCar_Successful() {
        CarRepository carRepository = mock(CarRepository.class);
        MotorcycleRepository motorcycleRepository = mock(MotorcycleRepository.class);
        UserRepository userRepository = mock(UserRepository.class);
        RentalRepository rentalRepository = mock(RentalRepository.class);

        RentalService rentalService = new RentalService(carRepository, motorcycleRepository, rentalRepository, userRepository);

        long carId = 1L;
        long userId = 1L;
        LocalDate startDate = LocalDate.now();
        LocalDate endDate = LocalDate.now().plusDays(3);

        Car car = new Car();
        car.setId(carId);
        car.setAvailable(true);
        car.setPricePerDay(50);

        User user = new User();
        user.setId(userId);
        user.setBalance(200);

        when(carRepository.findById(carId)).thenReturn(Optional.of(car));
        when(userRepository.findById(userId)).thenReturn(Optional.of(user));

        boolean result = rentalService.rentCar(carId, userId, startDate, endDate);

        assertTrue(result);
        assertFalse(car.isAvailable());
        verify(carRepository, times(1)).save(car);
        verify(userRepository, times(1)).save(user);
    }

    @Test
    public void testRentCar_InsufficientBalance() {
        CarRepository carRepository = mock(CarRepository.class);
        MotorcycleRepository motorcycleRepository = mock(MotorcycleRepository.class);
        UserRepository userRepository = mock(UserRepository.class);
        RentalRepository rentalRepository = mock(RentalRepository.class);

        RentalService rentalService = new RentalService(carRepository, motorcycleRepository, rentalRepository, userRepository);

        long carId = 1L;
        long userId = 1L;
        LocalDate startDate = LocalDate.now();
        LocalDate endDate = LocalDate.now().plusDays(3);

        Car car = new Car();
        car.setId(carId);
        car.setAvailable(true);
        car.setPricePerDay(50);

        User user = new User();
        user.setId(userId);
        user.setBalance(30);

        when(carRepository.findById(carId)).thenReturn(Optional.of(car));
        when(userRepository.findById(userId)).thenReturn(Optional.of(user));

        boolean result = rentalService.rentCar(carId, userId, startDate, endDate);

        assertFalse(result);
        assertTrue(car.isAvailable());
        assertEquals(30, user.getBalance());
        verify(carRepository, never()).save(car);
        verify(userRepository, never()).save(user);
    }

    @Test
    public void testRentMotorcycle_Successful() {
        MotorcycleRepository motorcycleRepository = mock(MotorcycleRepository.class);
        UserRepository userRepository = mock(UserRepository.class);

        RentalService rentalService = new RentalService(null, motorcycleRepository, null, userRepository);

        long motorcycleId = 1L;
        long userId = 1L;
        LocalDate startDate = LocalDate.now();
        LocalDate endDate = LocalDate.now().plusDays(3);

        Motorcycle motorcycle = new Motorcycle(); // Create a motorcycle instance
        motorcycle.setAvailable(true);

        User user = new User(); // Create a user instance
        user.setBalance(1000); // Set an initial balance

        when(motorcycleRepository.findById(motorcycleId)).thenReturn(Optional.of(motorcycle)); // Mock the motorcycle retrieval
        when(userRepository.findById(userId)).thenReturn(Optional.of(user)); // Mock the user retrieval

        boolean success = rentalService.rentMotorcycle(motorcycleId, userId, startDate, endDate);

        assertTrue(success); // Check if the rental was successful

        assertFalse(motorcycle.isAvailable()); // Check if the motorcycle availability was updated
        verify(motorcycleRepository, times(1)).save(motorcycle); // Verify that the motorcycle save method was called


        verify(userRepository, times(1)).save(user); // Verify that the user save method was called
    }

    @Test
    public void testSaveRental_Successful() {
        RentalRepository rentalRepository = mock(RentalRepository.class);

        RentalService rentalService = new RentalService(null, null, rentalRepository, null);

        Rental rental = new Rental(); // Create a rental instance

        rentalService.saveRental(rental);

        verify(rentalRepository, times(1)).save(rental); // Verify that the save method was called
    }

    @Test
    public void testGettersAndSetters() {
        Car car = new Car();

        car.setId(1L);
        assertEquals(1L, car.getId());

        car.setBrand("Toyota");
        assertEquals("Toyota", car.getBrand());

        car.setColor("Red");
        assertEquals("Red", car.getColor());

        car.setHorsepower(150);
        assertEquals(150, car.getHorsepower());

        car.setPricePerDay(100);
        assertEquals(100, car.getPricePerDay());

        car.setAvailable(true);
        assertTrue(car.isAvailable());

        car.setRentals(Collections.emptyList());
        assertNotNull(car.getRentals());

        LocalDate startDate = LocalDate.now();
        car.setStartAvailabilityDate(startDate);
        assertEquals(startDate, car.getStartAvailabilityDate());

        LocalDate endDate = LocalDate.now().plusDays(5);
        car.setEndAvailabilityDate(endDate);
        assertEquals(endDate, car.getEndAvailabilityDate());
    }

    @Test
    public void testEqualsAndHashCode() {
        Car car1 = new Car();
        car1.setId(1L);
        car1.setBrand("Toyota");
        car1.setColor("Red");

        Car car2 = new Car();
        car2.setId(1L);
        car2.setBrand("Toyota");
        car2.setColor("Red");

        assertEquals(car1, car2);
        assertEquals(car1.hashCode(), car2.hashCode());
    }

    @Test
    public void testToString() {
        Car car = new Car();
        car.setId(1L);
        car.setBrand("Toyota");
        car.setColor("Red");
        car.setHorsepower(150);
        car.setPricePerDay(100);
        car.setAvailable(true);
        car.setStartAvailabilityDate(LocalDate.now());
        car.setEndAvailabilityDate(LocalDate.now().plusDays(5));

        String expectedString = "Car{id=1, brand='Toyota', color='Red', horsepower=150, pricePerDay=100, available=true, startAvailabilityDate=" + LocalDate.now() + ", endAvailabilityDate=" + LocalDate.now().plusDays(5) + '}';
        assertEquals(expectedString, car.toString());
    }

    @Test
    public void testGettersAndSettersM() {
        Motorcycle motorcycle = new Motorcycle();

        motorcycle.setId(1L);
        assertEquals(1L, motorcycle.getId());

        motorcycle.setBrand("Honda");
        assertEquals("Honda", motorcycle.getBrand());

        motorcycle.setColor("Blue");
        assertEquals("Blue", motorcycle.getColor());

        motorcycle.setHorsepower(200);
        assertEquals(200, motorcycle.getHorsepower());

        motorcycle.setPricePerDay(120);
        assertEquals(120, motorcycle.getPricePerDay());

        motorcycle.setAvailable(true);
        assertTrue(motorcycle.isAvailable());

        LocalDate startDate = LocalDate.now();
        motorcycle.setStartAvailabilityDate(startDate);
        assertEquals(startDate, motorcycle.getStartAvailabilityDate());

        LocalDate endDate = LocalDate.now().plusDays(5);
        motorcycle.setEndAvailabilityDate(endDate);
        assertEquals(endDate, motorcycle.getEndAvailabilityDate());

        motorcycle.setRentals(Collections.emptyList());
        assertNotNull(motorcycle.getRentals());
    }

    @Test
    public void testEqualsAndHashCodeM() {
        Motorcycle motorcycle1 = new Motorcycle();
        motorcycle1.setId(1L);
        motorcycle1.setBrand("Honda");
        motorcycle1.setColor("Blue");

        Motorcycle motorcycle2 = new Motorcycle();
        motorcycle2.setId(1L);
        motorcycle2.setBrand("Honda");
        motorcycle2.setColor("Blue");

        assertEquals(motorcycle1, motorcycle2);
        assertEquals(motorcycle1.hashCode(), motorcycle2.hashCode());
    }

    @Test
    public void testToStringM() {
        Motorcycle motorcycle = new Motorcycle();
        motorcycle.setId(1L);
        motorcycle.setBrand("Honda");
        motorcycle.setColor("Blue");
        motorcycle.setHorsepower(200);
        motorcycle.setPricePerDay(120);
        motorcycle.setAvailable(true);
        motorcycle.setStartAvailabilityDate(LocalDate.now());
        motorcycle.setEndAvailabilityDate(LocalDate.now().plusDays(5));

        String expectedString = "Motorcycle{id=1, brand='Honda', color='Blue', horsepower=200, pricePerDay=120, available=true, startAvailabilityDate=" + LocalDate.now() + ", endAvailabilityDate=" + LocalDate.now().plusDays(5) + '}';
        assertEquals(expectedString, motorcycle.toString());
    }


    @Test
    public void testGettersAndSettersR() {
        Rental rental = new Rental();

        rental.setId(1L);
        assertEquals(1L, rental.getId());

        Car car = new Car();
        car.setId(1L);
        rental.setCar(car);
        assertEquals(1L, rental.getCarId());
        assertEquals(car, rental.getCar());

        Motorcycle motorcycle = new Motorcycle();
        motorcycle.setId(2L);
        rental.setMotorcycle(motorcycle);
        assertEquals(2L, rental.getMotorcycleId());
        assertEquals(motorcycle, rental.getMotorcycle());

        User user = new User();
        user.setId(3L);



        LocalDate startDate = LocalDate.now();
        rental.setStartDate(startDate);
        assertEquals(startDate, rental.getStartDate());

        LocalDate endDate = LocalDate.now().plusDays(5);
        rental.setEndDate(endDate);
        assertEquals(endDate, rental.getEndDate());
    }

    @Test
    public void testConstructors() {
        Car car = new Car();
        Motorcycle motorcycle = new Motorcycle();
        User user = new User();
        LocalDate startDate = LocalDate.now();
        LocalDate endDate = LocalDate.now().plusDays(5);

        Rental rental = new Rental(car, motorcycle, user, startDate, endDate);
        assertEquals(car, rental.getCar());
        assertEquals(motorcycle, rental.getMotorcycle());
        assertEquals(user, rental.getUser());
        assertEquals(startDate, rental.getStartDate());
        assertEquals(endDate, rental.getEndDate());

        Rental rentalWithUser = new Rental(user);
        assertNull(rentalWithUser.getCar());
        assertNull(rentalWithUser.getMotorcycle());
        assertEquals(user, rentalWithUser.getUser());
        assertNull(rentalWithUser.getStartDate());
        assertNull(rentalWithUser.getEndDate());
    }

    @Test
    public void testRegisterUser() {
        // Create mocks for necessary dependencies
        UserRepository userRepositoryMock = mock(UserRepository.class);
        UserService userServiceMock = mock(UserService.class);
        MainController mainController = new MainController(userRepositoryMock, null, userServiceMock, null, null, null);

        String username = "testUser";
        String password = "password123";

        // Mocking the userService behavior
        when(userServiceMock.isUsernameAvailable(username)).thenReturn(true);
        when(userServiceMock.registerUser(username, password, 0)).thenReturn(new User());

        // Your test logic to cover different scenarios
        // ...

        // For example:
        String viewName = mainController.registerUser(username, password);

        // Assert the outcome
        assertEquals("redirect:/login", viewName);
        verify(userServiceMock, times(1)).isUsernameAvailable(username);
        verify(userServiceMock, times(1)).registerUser(username, password, 0);
    }



    @Test
    public void testLoginUser_WithInvalidCredentials_ShouldRedirectToLoginPageWithError() {
        // Create mocks for necessary dependencies
        UserRepository userRepositoryMock = mock(UserRepository.class);
        UserService userServiceMock = mock(UserService.class);
        HttpSession httpSessionMock = mock(HttpSession.class);
        MainController mainController = new MainController(userRepositoryMock, null, userServiceMock, null, null, null);

        String username = "testUser";
        String password = "password123";

        // Mocking the userService behavior
        when(userServiceMock.authenticate(username, password)).thenReturn(null);

        // Your test logic
        String viewName = mainController.loginUser(username, password, null, httpSessionMock);

        // Assert the outcome
        assertEquals("redirect:/login?error=WrongCredentials", viewName);
        verify(userServiceMock, times(1)).authenticate(username, password);

    }

    @Test
    public void testAddBalance_WithValidUserId_ShouldIncreaseUserBalance() {
        // Create mocks for necessary dependencies
        UserRepository userRepositoryMock = mock(UserRepository.class);
        UserService userServiceMock = mock(UserService.class);
        HttpSession httpSessionMock = mock(HttpSession.class);
        MainController mainController = new MainController(userRepositoryMock, null, userServiceMock, null, null, null);

        Long userId = 1L;
        int amountToAdd = 50;
        User user = new User();
        user.setId(userId);
        user.setBalance(100); // Initial balance

        // Mocking the behavior
        when(httpSessionMock.getAttribute("userId")).thenReturn(userId);
        when(userRepositoryMock.findById(userId)).thenReturn(Optional.of(user));

        // Your test logic
        String redirect = mainController.addBalance(httpSessionMock, amountToAdd, null);

        // Assert the outcome
        assertEquals("redirect:/renting", redirect);

    }

    // Test for registering a new user
    @Test
    public void testRegisterUser_WithNewUsernameAndPassword_ShouldCreateUser() {
        // Create mocks for necessary dependencies
        UserRepository userRepositoryMock = mock(UserRepository.class);
        UserService userServiceMock = mock(UserService.class);
        HttpSession httpSessionMock = mock(HttpSession.class);
        MainController mainController = new MainController(userRepositoryMock, null, userServiceMock, null, null, null);

        String username = "newUser";
        String password = "pass123";
        int defaultBalance = 0;

        // Mocking the behavior
        when(userServiceMock.isUsernameAvailable(username)).thenReturn(true);
        when(userServiceMock.registerUser(username, password, defaultBalance)).thenReturn(new User());

        // Your test logic
        String redirect = mainController.registerUser(username, password);

        // Assert the outcome
        assertEquals("redirect:/login", redirect);
        verify(userServiceMock, times(1)).registerUser(username, password, defaultBalance);
    }

    // Test for displaying the registration page
    @Test
    public void testGetRegisterPage_ShouldReturnRegisterPage() {
        // Create mocks for necessary dependencies
        UserRepository userRepositoryMock = mock(UserRepository.class);
        UserService userServiceMock = mock(UserService.class);
        HttpSession httpSessionMock = mock(HttpSession.class);
        MainController mainController = new MainController(userRepositoryMock, null, userServiceMock, null, null, null);

        // Your test logic
        String viewName = mainController.getRegisterPage();

        // Assert the outcome
        assertEquals("register_page", viewName);
    }

    @Test
    public void testGetAllCars() {
        // Mocking the behavior of CarRepository
        when(carRepository.findAll()).thenReturn(Collections.singletonList(new Car()));

        List<Car> cars = carService.getAllCars();
        assertEquals(1, cars.size());
    }
    @Test
    public void testGetAllMotorcycles() {
        // Mocking the behavior of CarRepository
        when(motorcycleRepository.findAll()).thenReturn(Collections.singletonList(new Motorcycle()));

        List<Motorcycle> motorcycles = motorcycleService.getAllMotorcycles();
        assertEquals(1, motorcycles.size());
    }

    @Test
    public void testGetCarById_ExistingId() {
        Long carId = 1L;
        // Mocking the behavior of CarRepository
        when(carRepository.findById(carId)).thenReturn(Optional.of(new Car()));

        Optional<Car> car = carService.getCarById(carId);
        assertEquals(true, car.isPresent());
    }

    @Test
    public void testGetMotorById_ExistingId() {
        Long Id = 1L;
        // Mocking the behavior of CarRepository
        when(motorcycleRepository.findById(Id)).thenReturn(Optional.of(new Motorcycle()));

        Optional<Motorcycle> motor = motorcycleService.getMotorcycleById(Id);
        assertEquals(true, motor.isPresent());
    }

    @Test
    public void testSaveCar() {
        Car carToSave = new Car();
        carToSave.setBrand("TestBrand");

        when(carRepository.save(carToSave)).thenReturn(carToSave);

        Car savedCar = carService.saveCar(carToSave);

        assertEquals("TestBrand", savedCar.getBrand());
        verify(carRepository, times(1)).save(carToSave);
    }

    @Test
    public void testSaveMotor() {
        Motorcycle carToSave = new Motorcycle();
        carToSave.setBrand("TestBrand");

        when(motorcycleRepository.save(carToSave)).thenReturn(carToSave);

        Motorcycle savedCar = motorcycleService.saveMotorcycle(carToSave);

        assertEquals("TestBrand", savedCar.getBrand());
        verify(motorcycleRepository, times(1)).save(carToSave);
    }

    @Test
    public void testFindAvailableCarsByDateRange() {
        LocalDate startDate = LocalDate.now();
        LocalDate endDate = startDate.plusDays(5);

        // Mocking the behavior of CarRepository
        when(carRepository.findAvailableCarsBetweenDates(startDate, endDate)).thenReturn(Collections.emptyList());

        Iterable<Car> availableCars = carService.findAvailableCarsByDateRange(startDate, endDate);
        assertEquals(0, ((List<Car>) availableCars).size());
    }

    @Test
    public void testFindAvailableMotorsByDateRange() {
        LocalDate startDate = LocalDate.now();
        LocalDate endDate = startDate.plusDays(5);

        // Mocking the behavior of CarRepository
        when(motorcycleRepository.findAvailableMotorcyclesBetweenDates(startDate, endDate)).thenReturn(Collections.emptyList());

        Iterable<Motorcycle> availableCars = motorcycleService.findAvailableMotorcyclesByDateRange(startDate, endDate);
        assertEquals(0, ((List<Motorcycle>) availableCars).size());
    }


    @Test
    public void testFindAvailableCarsWithFilters() {
        LocalDate startDate = LocalDate.of(2024, 1, 1);
        LocalDate endDate = LocalDate.of(2024, 1, 7);

        Car car1 = new Car();
        car1.setBrand("Brand1");
        car1.setColor("Red");
        car1.setHorsepower(150);
        car1.setPricePerDay(180);
        car1.setAvailable(true);

        Car car2 = new Car();
        car2.setBrand("Brand2");
        car2.setColor("Blue");
        car2.setHorsepower(120);
        car2.setPricePerDay(220);
        car2.setAvailable(true);

        Car car3 = new Car();
        car3.setBrand("Brand3");
        car3.setColor("Red");
        car3.setHorsepower(200);
        car3.setPricePerDay(250);
        car3.setAvailable(true);

        Car car4 = new Car();
        car4.setBrand("Brand1");
        car4.setColor("Green");
        car4.setHorsepower(180);
        car4.setPricePerDay(200);
        car4.setAvailable(false);
        List<Car> availableCars = Arrays.asList(car1, car2, car3, car4);
        when(carRepository.findAvailableCarsBetweenDates(startDate, endDate)).thenReturn(availableCars);

        Iterable<Car> filteredCars = carService.findAvailableCarsWithFilters(startDate, endDate, "Brand3", "Red", 170, 260, true);

        List<Car> filteredCarList = StreamSupport.stream(filteredCars.spliterator(), false)
                .collect(Collectors.toList());

        assertEquals(1, filteredCarList.size());

        // Iterate through filtered cars for verification
        for (Car filteredCar : filteredCarList) {
            assertEquals("Brand3", filteredCar.getBrand());
            assertEquals("Red", filteredCar.getColor());
            assertEquals(200, filteredCar.getHorsepower()); // Adjust this value as per your expectation
            assertEquals(250, filteredCar.getPricePerDay()); // Adjust this value as per your expectation
            assertTrue(filteredCar.isAvailable());
        }
    }

    @Test
    public void testFindAvailableMotorsWithFilters() {
        LocalDate startDate = LocalDate.of(2024, 1, 1);
        LocalDate endDate = LocalDate.of(2024, 1, 7);

        Motorcycle car1 = new Motorcycle();
        car1.setBrand("Brand1");
        car1.setColor("Red");
        car1.setHorsepower(150);
        car1.setPricePerDay(180);
        car1.setAvailable(true);

        Motorcycle car2 = new Motorcycle();
        car2.setBrand("Brand2");
        car2.setColor("Blue");
        car2.setHorsepower(120);
        car2.setPricePerDay(220);
        car2.setAvailable(true);

        Motorcycle car3 = new Motorcycle();
        car3.setBrand("Brand3");
        car3.setColor("Red");
        car3.setHorsepower(200);
        car3.setPricePerDay(250);
        car3.setAvailable(true);

        Motorcycle car4 = new Motorcycle();
        car4.setBrand("Brand1");
        car4.setColor("Green");
        car4.setHorsepower(180);
        car4.setPricePerDay(200);
        car4.setAvailable(false);
        List<Motorcycle> availableCars = Arrays.asList(car1, car2, car3, car4);
        when(motorcycleRepository.findAvailableMotorcyclesBetweenDates(startDate, endDate)).thenReturn(availableCars);

        Iterable<Motorcycle> filteredCars = motorcycleService.findAvailableMotorcyclesWithFilters(startDate, endDate, "Brand3", "Red", 170, 260, true);

        List<Motorcycle> filteredCarList = StreamSupport.stream(filteredCars.spliterator(), false)
                .collect(Collectors.toList());

        assertEquals(1, filteredCarList.size());

        // Iterate through filtered cars for verification
        for (Motorcycle filteredCar : filteredCarList) {
            assertEquals("Brand3", filteredCar.getBrand());
            assertEquals("Red", filteredCar.getColor());
            assertEquals(200, filteredCar.getHorsepower()); // Adjust this value as per your expectation
            assertEquals(250, filteredCar.getPricePerDay()); // Adjust this value as per your expectation
            assertTrue(filteredCar.isAvailable());
        }
    }



    @Test
    public void testDeleteCarByAttributes() {
        // Mock parameters
        String brand = "Toyota";
        String color = "Red";
        Integer horsepower = 200;
        Integer pricePerDay = 100;
        Boolean available = true;
        LocalDate startAvailabilityDate = LocalDate.now();
        LocalDate endAvailabilityDate = LocalDate.now().plusDays(7);

        Query mockedQuery = mock(Query.class);
        when(entityManager.createQuery(anyString())).thenReturn(mockedQuery);
        when(mockedQuery.executeUpdate()).thenReturn(5); // Assuming 5 rows were deleted

        int deletedCount = carService.deleteCarByAttributes(brand, color, horsepower, pricePerDay,
                available, startAvailabilityDate, endAvailabilityDate);

        // Verify that entityManager.createQuery was called with the correct query
        verify(entityManager).createQuery(anyString());

        // Verify that parameters were set correctly
        verify(mockedQuery).setParameter(eq("brand"), eq(brand));
        verify(mockedQuery).setParameter(eq("color"), eq(color));
        // Set and verify other parameters similarly

        // Check the returned count matches the expected deleted count
        assertEquals(5, deletedCount);
    }

    @Test
    public void testDeleteMotorsByAttributes() {
        // Mock parameters
        String brand = "Toyota";
        String color = "Red";
        Integer horsepower = 200;
        Integer pricePerDay = 100;
        Boolean available = true;
        LocalDate startAvailabilityDate = LocalDate.now();
        LocalDate endAvailabilityDate = LocalDate.now().plusDays(7);

        Query mockedQuery = mock(Query.class);
        when(entityManager.createQuery(anyString())).thenReturn(mockedQuery);
        when(mockedQuery.executeUpdate()).thenReturn(5); // Assuming 5 rows were deleted

        int deletedCount = motorcycleService.deleteMotorcycleByAttributes(brand, color, horsepower, pricePerDay,
                available, startAvailabilityDate, endAvailabilityDate);

        // Verify that entityManager.createQuery was called with the correct query
        verify(entityManager).createQuery(anyString());

        // Verify that parameters were set correctly
        verify(mockedQuery).setParameter(eq("brand"), eq(brand));
        verify(mockedQuery).setParameter(eq("color"), eq(color));
        // Set and verify other parameters similarly

        // Check the returned count matches the expected deleted count
        assertEquals(5, deletedCount);
    }
}






